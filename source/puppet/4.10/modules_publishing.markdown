---
layout: default
title: "Publishing modules on the Puppet Forge"
---


[installing]: ./modules_installing.html
[fundamentals]: ./modules_fundamentals.html
[plugins]: ./plugins_in_modules.html
[forge]: https://forge.puppet.com/
[rspec]: http://rspec-puppet.com/
[signup]: ./images/forge_signup.png
[publishmodule]: ./images/forge_publish_module.png
[uploadtarball]: ./images/forge_upload_tarball.png
[uploadtarball2]: ./images/forge_upload_tarball2.png
[forgenewrelease]: ./images/forge_new_release.png
[documentation]: ./modules_documentation.html
[errors]: ./modules_installing.html#errors
[yourmodules]: ./images/yourmodules.png
[selectrelease]: ./images/selectrelease.png
[deletebutton]: ./images/deletebutton.png
[deletionpage]: ./images/deletionpage.png
[deleteconfirmation]: ./images/deleteconfirmation.png
[deletedrelease]: ./images/deletedrelease.png
[delteddownloadwarning]: ./images/delteddownloadwarning.png
[onereleasesearch]: ./images/onereleasesearch.png
[noreleasesearch]: ./images/noreleasesearch.png
[noreleasesearchfilter]: ./images/noreleasesearchfilter.png
[metadata]: ./modules_metadata.html


The Puppet Forge is a community repository of modules, written and contributed by open source Puppet and Puppet Enterprise users. By publishing modules on the Forge, you can share your module with other Puppet users, get contributions to your modules, and maintain your module releases.

Before you begin, you should already have written a useful Puppet module. To publish your module:

1. Create a Puppet Forge account, if you don't already have one.
2. Prepare your module.
3. Write a metadata.json file with the required metadata.
4. Build an uploadable tarball of your module.
5. Upload your module using the Puppet Forge's web interface.

## Related topics

* [Module fundamentals][fundamentals]: How to write and use your own Puppet modules.
* [Installing modules][installing]: How to install pre-built modules from the Puppet Forge.
* [Using plugins][plugins]: How to arrange plugins (such as custom facts and custom resource types) in modules and sync them to agent nodes.
* [Documenting modules][documentation]: How to write good documentation for your modules.

### Naming your module {:.concept}

Your module has two names: a short name, like "mysql" and a long name that includes your Forge username, like "puppetlabs-mysql".

The Puppet Forge requires the module long name. This name is composed of your Forge username and the short name of your module. For example, the user named "puppetlabs" maintains a "mysql" module, which is known to the Forge as "puppetlabs-mysql". **Be sure to use this long name in your module's [metadata.json file][inpage_metadata].** This helps disambiguate modules that might have common short names, such as "mysql" or "apache."

However, your module directory on disk **must** use the short name, without the username prefix. (Module directory names cannot contain dashes or periods; only letters, numbers, and underscores). As long as you have the correct long name in your `metadata.json` file, the `puppet module build` command will use the correct names in the correct places.

> **Note**: Although the Puppet Forge expects to receive modules named `username-module`, its web interface presents them as `username/module`. Always use the `username-module` style in your metadata files and when issuing commands.

## Create a Puppet Forge account {:.task}

To publish your modules to the Puppet Forge, you need to create a Puppet Forge account.

1. Start by navigating to the [Forge website][forge] and click **Sign Up*:

2. Fill in your details. The username you pick will be the first part of your module long name (such as "bobcat/apache").

3. After you sign up, you will receive a verification email. After you verify your email, you can publish modules to the Forge.

## Prepare your module {:.task}

If you already have a Puppet module with the [correct directory layout][fundamentals], you can continue to the next step.

Alternately, you can use the `puppet module generate` action to generate a template layout. Generating a module will provide you with a sample README and a copy of the `spec_helper` tool for writing [rspec-puppet][rspec] tests. It will also launch a series of questions that will create your metadata.json file.

Follow the directions to [generate a new module](./modules_fundamentals.html#writing-modules).

>**Note:** In order to successfully publish your module to the Puppet Forge and ensure that everything is rendered correctly, your README, license file, changelog, and metadata.json must be UTF-8 encoded.

1. Create a list of files to exclude from your module package.

   You can exclude certain files from your module build by including them in either a `.gitignore` or a `.pmtignore` file. This is useful for excluding files that are not needed to run the module, such as files generated by spec tests.
   
   The `.pmtignore` file excludes files during `puppet module build` only. To prevent files from ever being checked into Git, use `.gitignore`
[3:58 PM] Glenn Sarti: .gitignore = Ignore these files ever being checked in. Only ignore these files as they're local to my development e.g. Gemfile.lock, tmp/stuff.pp
[3:58 PM] Glenn Sarti: You want spec tests in source control but not in your moduleIf you have both a `.pmtignore` and a `.gitignore` file, the `puppet module` command uses the `.pmtignore` file.

   1. Create a `.pmtignore` or `.gitignore` file in the module's root directory.
   
   2. List the files you want ignored. For example:


    ```
import/
/spec/fixtures/
.tmp
*.lock
*.local
.rbenv-gemsets
.ruby-version
build/
docs/
tests/
log/
junit/
tmp/
    ```


2. Remove symlinks from your module

Symlinks in modules are unsupported. If your module contains symlinks, remove them Before you build your module, you must make sure that symlinks are either removed or set to be [ignored](#set-files-to-be-ignored).

If you try to build a module with symlinks, you will receive the following error:

```
Warning: Symlinks in modules are unsupported. Please investigate symlink manifests/foo.pp->manifests/init.pp.
Error: Found symlinks. Symlinks in modules are not allowed, please remove them.
Error: Try 'puppet help module build' for usage
```

1. Add module metadata in `metadata.json` {:.task}

If you generated your module using the `puppet module generate` command, you'll already have a `metadata.json` file. Check it and make any necessary edits.

If you assembled your module manually, you must make sure that you have a metadata.json file in your module's main directory. See the related topic about module metadata for details on writing the `metadata.json` file.

Related topics:

* [Module metadata and `metadata.json`][metadata]

## Build your module

In order for your module to be successfully uploaded to and displayed on the Forge, your ['metadata.json'][metadata] file must include the following keys:

* `name`
* `version`
* `author`
* `license`
* `summary`
* `source`
* `dependencies`
* `project_page`
* `operatingsystem_support`
* `tags`

To build your module:

1. Run `# puppet module build <MODULE DIRECTORY>`. A .tar.gz package will be generated and saved in the module's pkg/ subdirectory. For example:

```
# puppet module build /etc/puppetlabs/puppet/modules/mymodule
Building /etc/puppetlabs/puppet/modules/mymodule for release
/etc/puppetlabs/puppet/modules/mymodule/pkg/examplecorp-mymodule-0.0.1.tar.gz
```

>**Note:**
>
>Throughout the Puppet 3.x series, deprecation warnings were issued for Modulefile. If you still have a Modulefile, it will be treated like any other text file in the root directory of the module. Move any metadata contained in the Modulefile to the [metadata.json][inpage_metadata].

## Upload to the Puppet Forge

Now that you have a compiled `tar.gz` package, you can upload it to the Forge. There is currently no command line tool for publishing; you must use the Forge's web interface. *Note:* Your tarball must be 10MB or less.

Whether you are uploading a brand new module or a new release of an existing module, follow the steps below to publish your release:

1. In your web browser, navigate [to the Puppet Forge][forge] and log in.

2. Click on "Publish" in the upper right hand corner of the screen.


   ![publish a module][publishmodule]

3. This will bring you to the upload page:


   ![upload a tarball][uploadtarball]

4. Click "Choose File" and use the file browser to locate and select the release tarball you created with the `puppet module build` action. Then click the "Upload Release" link.

5. A successful upload will result in you being taken to the new release page of your module. Any errors will come up on the same screen. Once your module has been published to the Puppet Forge, the Forge will pull your README, Changelog, and License files from your tarball to display on your module's page. To confirm that it was published correctly, you can [install it][installing] on a new system using the `puppet module install` action.


#### Notes

1. You must make sure that your [metadata][inpage_metadata] is correct and entirely located in metadata.json, otherwise your module will either not display correctly on the Forge or will error out during upload.
2. When you release a new version of an already published module, you must increment the `version` field in the metadata.json file (ensuring you use a valid [semantic version](http://semver.org/)).
3. You are highly encouraged to fix any problems or mistakes with your module by issuing another release.

## Delete a release


At some point, you might want to delete a release of your module. You can accomplish this easily from the Forge's web interface.

>**Note**
>
>A deleted release will still be downloadable via the Forge page or Puppet module tool (PMT) if a user requests the module by specific version. **You cannot delete a released version and upload a new version of the same release.**

Follow the steps below to delete your release:

1. In your web browser, navigate [to the Puppet Forge][forge] and log in.

2. Click **Your Modules**.


   ![your modules button][yourmodules]

3. Go to the module page of the module whose release you want to delete.

4. Locate **Select another release**, choose the release you want from the drop down, and click **Delete**.


   ![select the release to delete][selectrelease]


   ![delete][deletebutton]

5. You will be taken to a new page. On that page, you must supply a reason for the deletion. **Note:** Your reason will be visible to users on the Forge.


   ![deletion page][deletionpage]

6. Click **Yes, delete it.**

7. On your module page, you will see a banner confirmation of the deletion.


   ![confirmation banner][deleteconfirmation]


Once you receive the confirmation banner, your release is officially deleted!

## Downloading a deleted release

It is still possible to download a specific release of a module, even if it has been deleted. If you check the **Select another release** drop down, the release is still an option in the menu, but is marked as deleted.

   ![the deleted release is still there][deletedrelease]

If you select the deleted release, a warning banner will appear on the page with the reason for deletion. However, you can still download the deleted release using the PMT or by clicking **Download**.

   ![download deleted release][delteddownloadwarning]

## Searching for a deleted module

If the only release of a module is deleted, or if all the releases of a module are deleted, the module will still show up in the Forge's search under some circumstances.

For example, puppet-appdirector has only one release. It is the only result when we search for the word 'appdirector'.

   ![one module one release][onereleasesearch]

If that one release is deleted and we search for the word 'appdirector', no results are found.

   ![no module][noreleasesearch]

However, if we check the box to **Include deleted modules** in our search, the appdirector module is found.

  ![there it is][noreleasesearchfilter]
