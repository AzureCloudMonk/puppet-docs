---
layout: default
title: "Documenting modules"
---

[installing]: ./modules_installing.html
[fundamentals]: ./modules_fundamentals.html
[plugins]: ./plugins_in_modules.html
[publishing]: ./modules_publishing.html
[template]: ./READMEtemplate.txt
[forge]: https://forge.puppetlabs.com/
[commonmark]: http://commonmark.org/
[metadata.json]: ./modules_metadata.html
[pdk]: {{pdk}}/pdk.html
[pstrings]: ./puppet_strings.html
[pstrings_style]: ./puppet_strings_style.html



Document any module you write, whether your module is for internal use only or for publication on the Puppet Forge. Complete, clear documentation helps your module users understand what your module can do and how to use it.

When writing module documentation, base your README on our module README template and use Puppet Strings to generate reference information for your module's classes, defined types, functions, and resource types and providers.

Related topics:

* [Puppet Strings][pstrings]: How to generate documentation using Puppet Strings.
* [Puppet Strings style guide][pstrings_style]: How to format and write code comments for Strings documentation.
* [Module fundamentals][fundamentals]: How to use and write Puppet modules.
* [Installing modules][installing]: How to install pre-built modules from the Puppet Forge.
* [Publishing modules][publishing]: How to publish your modules to the Puppet Forge.
* [Using plug-ins][plugins]: How to arrange plug-ins (like custom facts and custom resource types) in modules and sync them to agent nodes.
* [Markdown][commonmark]
* [README template][template]
* [Puppet Development Kit][pdk]: A package of development and testing tools to help you create great modules.


{:.concept}
## The README

In your README, include basic module information and extended usage examples for common use cases. The README tells users what your module does and how to use it.

Include reference information as a separate `REFERENCE.md` file in the module's root directory. This file should include a complete list of your module's elements: classes, defined types, functions, resource types and providers, Puppet tasks and plans, and parameters for each element. If you upload your module to the Forge, this reference information is displayed in a Reference tab on the module detail page. To make sure your docs stay current, use Puppet Strings to generate the `REFERENCE.md` page based on your code and comments.

Strings does not generate information for type aliases or facts. If your module includes these elements, document them in your README.

Write your README in Markdown and use the `.md` or `.markdown` extension for the file. The README should contain the following sections:

* Module description: What the module does and why it is useful.
* Setup: Prerequisites for module use and getting started information.
* Usage: Instructions and examples for common use cases or advanced configuration options.
* Reference: If the module contains facts or type aliases, include them in a short supplementary Reference section. All other reference information, such as classes and their parameters, are in the `REFERENCE.md` file generated by Strings.
* Limitations: OS compatibility and known issues.
* Development: Guide for contributing to the module.


If you used Puppet Development Kit (or the deprecated `puppet module generate` command) to generate your module, you already have a copy of the README template in `.md` format in your module. You can also use the standalone template to guide you.

Related topics:

* [README template][template]

{:.section}
### Creating a table of contents

The table of contents helps your users find their way around your module README.

Start with the module name as a Level 1 heading at the top of the module, followed by "Table of Contents" as a Level 4 heading. Under the table of contents heading, include a numbered list of top-level sections, with any necessary subsections in a bulleted list below the section heading. Link each section to its corresponding heading in the README.


``` markdown

    # modulename

    #### Table of Contents

    1. [Module Description - What the module does and why it is useful](#module-description)
    1. [Setup - The basics of getting started with [modulename]](#setup)
        * [What [modulename] affects](#what-[modulename]-affects)
        * [Setup requirements](#setup-requirements)
        * [Beginning with [modulename]](#beginning-with-[modulename])
    1. [Usage - Configuration options and additional functionality](#usage)
    1. [Limitations - OS compatibility, etc.](#limitations)
    1. [Development - Guide for contributing to the module](#development)
```

{:.section}
### Writing the module description

In your module **Description**, briefly tell users what your module does and what kind of problems they can use it to solve.

This should be a fairly short description helps the user decide if your module is what they want. Does your module just install software? Does it install and configure it? Give your user information about what to expect from the module so they can assess whether they want to use it or not.

``` markdown
## Module description

The `cat` module installs, configures, and maintains your cat in both apartment and residential house settings.

The cat module automates the installation of a cat to your apartment or house, and then provides options for configuring the cat to fit your environment's needs. Once installed and configured, the cat module automates maintenance of your cat through a series of resource types and providers.
```

{:.section}
### Writing the Setup section

In the **Setup** section, detail how your user can successfully get their module functioning. Include steps to get started, requirements, and any other information users might need to know before they start using your module.

Module installation instructions are covered both on the module's Forge page and in the Puppet docs, so don't reiterate them here. In this section, include the following subsections, as applicable:

* **What (modulename) affects**

  Include this section only if:

  * The module alters, overwrites, or otherwise touches files, packages, services, or operations other than the named software; OR
  * The module's general performance can overwrite, purge, or otherwise remove entries, files, or directories in a user's environment.

  For example:

  ``` markdown
  ## Setup

  ### What cat affects

  * Your dog door might be overwritten if not secured before installation.
  ```

* **Setup Requirements**

  Include this section only if the module requires additional software or some tweak to a user's environment. For instance, the firewall module uses Ruby-based providers which required pluginsync to be enabled.

* **Beginning with [modulename]**

  Always include this section to explain the minimum steps required to get the module up and running in a user's environment. This section can show basic Proof of Concept use cases, so it doesn't have to be something you would run in production. For simple modules, "Declare the main `::cat` class" may be enough.

  ``` markdown
  ### Beginning with cat

  Declare the main `::cat` class.
  ```

{:.section}
### Writing the Usage section

Include usage examples for common use cases in the **Usage** section. Show your users how to use your module to solve problems, and be sure to include code examples.

If your module does many things, include three to five examples of the most important or common tasks a user can accomplish with your module. Show how to accomplish more complex tasks that involve different types, classes, and functions working in tandem. For example, the Usage section for the `puppetlabs-apache` module includes an example that shows users how to set up a virtual host with SSL, which involves several classes.


``` markdown
## Usage

You can manage all interaction with your cat through the main `cat` class. With the default options, the module installs a basic cat with no optimizations.

### I just want cat, what's the minimum I need?

    include '::cat'

### I want to configure my lasers

Use the following to configure your lasers for a random-pattern, 20-minute playtime at 3 a.m. local time.

    class { 'cat':
      laser => {
        pattern    => 'random',
        duration   => '20',
        start_time => '0300',
      }
    }
```

{:.section}
### Writing the limitations and development sections

In the **Limitations** section, warn your users of issues, and the **Development** section tells your users how they can contribute to your module.

In the Limitations section, list any incompatibilities, known issues, or other warnings.

```
## Limitations

This module cannot be used with the smallchild module.
```

In the Development section, tell other users the ground rules for contributing to your project and how they should submit their work.

{:.concept}
### README style notes

To write a clear, concise, and comprehensible README, we recommend following a few principles, best practices, and style guidelines.

{:.section}
#### General principles of READMEs

1. Write for both web and terminal viewing. We recommend [Markdown][commonmark]. Above all else, your module must be easily readable and scannable.
2. Limit the number of external links. Linking to anything on the web limits the usability of the module, particularly if a range of users might use it in various environments, such as in terminal. Also, links look gross in plain Markdown and make your README less readable.
3. Scannability is key. READMEs are formulaic and repetitious for a reason. Repetition means that no matter the module, users know where to get the information they're looking for.

{:.section}
#### Style and formatting

1. When referring to the module, the module's name is lowercase. When referring to the software the module is automating, the software's name is uppercase (as appropriate).
2. *Public* classes and defined types are intended to be tweaked, changed, or otherwise interacted with by the user. *Private* classes and defined types do the behind-the-scenes work of the module (for instance, grabbing the package and installing it) and are not intended for the user to touch or look at.
3. Start every parameter description with an action verb, if possible (such as "Enables..." or "Specifies...").
4. List the valid options (such as, "Valid options: an array") for the parameter, and the default value, if applicable.

   For example:


   ``` markdown
   Specifies the type of meow the cat service uses at food distribution time. Valid options: 'bark', 'low', 'rumble', 'loud', or 'none'. Default: 'low'.
   ```

   or

   ``` markdown
   Sets the food intake limit for your cat service. Determined in grams. Valid options: Integer; maximum = 100g.
   ```

4. List parameters in alphabetical order. This makes it easier to find specific settings.
5. Specify the valid options (or inputs or values) for every parameter. This might be a string, integers, an array, or specific values.
6. Mark parameters as Required if the user must set a value (that is, the parameter has no default).
7.`< >` do not render in Markdown. Ask us how we know.
8. You don't need to escape `_` because neither GitHub nor the Forge's Markdown rendering hides `_`.
9. The Forge's Markdown rendering is exactly the same as GitHub's rendering.

{:.section}
#### Documentation best practices

If you really want your documentation to shine, following a few best practices can help make your documentation clear and readable.

1. Use the second person; that is, write directly to the person reading your document. For example, “If you’re installing the cat module on Windows....”
2. Use the imperative; that is, tell the user what they should do. For example, "Secure your dog door before installing the cat module."
3. Use the active voice whenever possible. For example, "We recommend that you install cat and bird modules on separate instances" rather than "It is recommended that you install cat and bird modules on separate instances."
4. Use the present tense, almost always. You seldom need the word "will," for example. Events that regularly occur should be present tense: "This parameter *sets* your cat to 'purebred'. The purebred cat *alerts* you for breakfast at 6 a.m." Only use future tense when you are specifically referring to something that takes place at a time in the future, such as "The `tail` parameter is deprecated and *will be* removed in a future version. Use `manx` instead."
5. Lists, whether ordered or unordered, make things clearer for the reader. When steps should happen in a sequence, use an ordered list (1, 2, 3…). If order doesn’t matter, like in a list of options or requirements, use an unordered (bulleted) list.


{:.section}
### Generating Reference documentation with Strings

List reference information --- that is, a complete list of classes, defined types, functions, resource types and providers, tasks, and plans in a separate `REFERENCE.md` file in the root directory of your module. Use Puppet Strings to generate this documentation based on your comments and module code. If you aren't using Strings to generate documentation yet, you can create a `REFERENCE.md` file manually.

> Previously, we recommended that module authors include reference information in the README itself. However, the **Reference** section often became quite long and difficult to maintain. Moving reference information to a separate file keeps the README more readable, and using Strings to generate this file should alleviate maintenance work. The Forge now displays information from a module's REFERENCE.md file in a Reference tab on the module detail page, so the information remains easily accessible to users. To transition your module to the REFERENCE.md model, add Strings comments to your code for each of your classes, defined types, functions, task plans, and resource types and providers. You can create a REFERENCE.md file manually, but remember that if you generate a REFERENCE.md with Strings, it will overwrite any existing REFERENCE.md file. For details on adding comments to your code, see the [Puppet Strings style guide](https://puppet.com/docs/puppet/5.5/puppet_strings_style.html). For instructions on how to install and use Strings, see the [Puppet Strings documentation](https://puppet.com/docs/puppet/5.5/puppet_strings.html).


{:.section}
### Manually writing reference information

If you aren't using Puppet Strings yet to generate your Reference documentation, you can manually create a `REFERENCE.md` file listing each of your classes, defined types, resource types and providers, functions, and facts, along with any parameters. If your module contains type aliases or facts, which Strings doesn't support yet, document them in a short, supplementary Reference section.

To manually document reference information, start your reference information with a small table of contents that first lists the classes, defined types, and resource types of your module. If your module contains both public and private classes or defined types, list the public and the private separately. Include a brief description of what these items do in your module.

```
## Reference

### Classes

#### Public classes

*[`pet::cat`](#petcat): Installs and configures a cat in your environment.

#### Private classes

*[`pet::cat::install`]: Handles the cat packages.
*[`pet::cat::configure`]: Handles the configuration file.
```

After this table of contents, list the parameters, providers, or features for each element (class, defined type, function, and so on) of your module. Be sure to include valid or acceptable values and any defaults that apply.

Each element in this list should include:

  * The data type, if applicable.
  * A description of what the element does.
  * Valid values, if the data type doesn't make it obvious.
  * Default value, if any.

```
### `pet::cat`

#### Parameters

##### `purr`

Data type: Boolean.

Enables purring in your cat.

Default: `true`.

##### `meow`

Enables vocalization in your cat. Valid options: 'string'.

Default: 'medium-loud'.

#### `laser`

Specifies the type, duration, and timing of your cat's laser show.

Default: `undef`.

Valid options: A hash with the following keys:

* `pattern` - accepts 'random', 'line', or a string mapped to a custom laser_program, defaults to 'random'.
* `duration` - accepts an integer in seconds, defaults to '5'.
* `frequency` - accepts an integer, defaults to 1.
* `start_time` - accepts an integer specifying the 24-hr formatted start time for the program.
```
